<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software adventures and thoughts</title>
    <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://blog.ralch.com/tags/model/index.xml</link>
    <language>en-us</language>
    <author>Svetlin Ralchev</author>
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>Data validation in Golang</title>
      <link>http://blog.ralch.com/tutorial/golang-model-validation/</link>
      <pubDate>Sun, 22 Nov 2015 19:28:31 UTC</pubDate>
      <author>Svetlin Ralchev</author>
      <guid>http://blog.ralch.com/tutorial/golang-model-validation/</guid>
      <description>

&lt;p&gt;Almost every application requires high data integrirty and quality. Very likely
is its algorithms to behave weird and produce unexpected results due to invalid
input.&lt;/p&gt;

&lt;p&gt;An important aspect of software development is data validation. In this article
we will explore &lt;a href=&#34;https://github.com/asaskevich/govalidator&#34;&gt;govalidate&lt;/a&gt; package
that helps us to validate and sanitize any string, struct and slice in &lt;code&gt;Go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The package itself is very infulenced by its javascript predaccessor
&lt;a href=&#34;https://github.com/chriso/validator.js&#34;&gt;validator.js&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;installation&#34;&gt;Installation&lt;/h4&gt;

&lt;p&gt;Like any other &lt;code&gt;Go&lt;/code&gt; package we should install it first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get github.com/asaskevich/govalidator
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;getting-started&#34;&gt;Getting started&lt;/h4&gt;

&lt;p&gt;The package provides a set of built-in function for validating all built-in &lt;code&gt;Go&lt;/code&gt;
type, user structs and collections.&lt;/p&gt;

&lt;p&gt;First we should import the package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/asaskevich/govalidator&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;validating-built-in-types&#34;&gt;Validating built-in types&lt;/h4&gt;

&lt;p&gt;We will explore some of the built in functions that validates some untrivial but
common types:&lt;/p&gt;

&lt;p&gt;If you want to validate whether a string is a URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// the function returns an boolean field
isValid := govalidator.IsURL(`http://user@pass:example.come`)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For IP address you should use &lt;code&gt;IsIP&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// the function returns an boolean field
isValid := govalidator.IsIP(`127.0.0.1`)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;validating-struct&#34;&gt;Validating struct&lt;/h4&gt;

&lt;p&gt;The validation functions have a tag representation that could be used as part of
property definition in particular struct.&lt;/p&gt;

&lt;p&gt;Lets have the following sruct:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Server struct {
	ID         string `valid:&amp;quot;uuid,required&amp;quot;`
	Name       string `valid:&amp;quot;machine_id&amp;quot;`
	HostIP     string `valid:&amp;quot;ip&amp;quot;`
	MacAddress string `valid:&amp;quot;mac,required&amp;quot;`
	WebAddress string `valid:&amp;quot;url&amp;quot;`
	AdminEmail string `valid:&amp;quot;email&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every of its fields has a validation tag that specifies its format:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ID&lt;/code&gt; field should be in UUID format and should not be empty&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HostIP&lt;/code&gt; field should be a valid IP address&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MacAddress&lt;/code&gt; field should be a valid MAC address and should not be empty&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WebAddress&lt;/code&gt; field should be a valid URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AdminEmail&lt;/code&gt; field should be a valida email address&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;Name&lt;/code&gt; field is different from the other. It uses &lt;code&gt;machine_id&lt;/code&gt; tag which is
not built-in &lt;code&gt;govalidator&lt;/code&gt; package. This is a custom validation tag defined by
registered callback validation function for &lt;code&gt;machine_id&lt;/code&gt; key in &lt;code&gt;govalidator.TagMap&lt;/code&gt;
hashmap:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;govalidator.TagMap[&amp;quot;machine_id&amp;quot;] = govalidator.Validator(func(str string) bool {
	return strings.HasPrefix(str, &amp;quot;IX&amp;quot;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function is called for all fields that has &lt;code&gt;valid:&amp;quot;machine_id&amp;quot;&lt;/code&gt; tag. It checks
whether their value is compliant with desired format.&lt;/p&gt;

&lt;p&gt;Then we can validate an instance of &lt;code&gt;Server&lt;/code&gt; struct:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server := &amp;amp;Server{
	ID:         &amp;quot;123e4567-e89b-12d3-a456-426655440000&amp;quot;,
	Name:       &amp;quot;IX01&amp;quot;,
	HostIP:     &amp;quot;127.0.0.1&amp;quot;,
	MacAddress: &amp;quot;01:23:45:67:89:ab&amp;quot;,
	WebAddress: &amp;quot;www.example.com&amp;quot;,
	AdminEmail: &amp;quot;admin@exmaple.com&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For that purpose we should use &lt;code&gt;govalidator.ValidateStruct&lt;/code&gt; function which
returns an error and boolean value as result of validation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ok, err := govalidator.ValidateStruct(server); err != nil {
	panic(err)
} else {
	fmt.Printf(&amp;quot;OK: %v\n&amp;quot;, ok)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;documentation&#34;&gt;Documentation&lt;/h4&gt;

&lt;p&gt;You can read &lt;a href=&#34;https://github.com/asaskevich/govalidator&#34;&gt;the official
documentation&lt;/a&gt; for the rest of the
functions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
